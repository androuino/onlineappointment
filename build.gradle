import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id 'groovy'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

def currentVersion=1.0

group groupName
version currentVersion

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    mavenCentral()
    maven {
        url "http://nexus.ailis.de/content/groups/public/"
    }
}

dependencies {
    def commonVer = "2.7.17"

    //compile 'org.codehaus.groovy:groovy-all:2.3.11'
    // Set "export GRADLE_COMPILE_ONLY=true" in compile script
    boolean isDev = project.version.toString().contains("SNAPSHOT") ||
            !System.getenv().keySet().toList().contains("GRADLE_COMPILE_ONLY")
    println isDev ? "**** DEV ****" : "<<< PROD >>>"
    [
            "com.intellisrc:core:${commonVer}",
            "com.intellisrc:db:${commonVer}",
            "com.intellisrc:web:${commonVer}",
            "com.intellisrc:thread:${commonVer}",
            "com.intellisrc:crypt:${commonVer}"
    ].each {
        if (isDev) { // if is development (e.g. IntelliJ) it will include all the libraries.
            implementation it
        } else {
            compileOnly it
        }
    }
    //implementation "org.python:jython-standalone:jar:${jythonVer}"
    testImplementation 'org.spockframework:spock-unitils:1.3-groovy-2.5'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.compileOnly
}

shadowJar {
    baseName = project.name
    version = project.version
    zip64 = true
    shadowJar.finalizedBy copyRuntimeLibs
}

task compile (dependsOn: [
        shadowJar
]) {
    println "-----------------------------"
    println "Building jar at: build/libs/"
    println "-----------------------------"
}

//create a single Jar with all dependencies
jar {
    from configurations.compile.collect { zipTree it }
    manifest {
        attributes(
                'Implementation-Title': "${artifact}",
                'Implementation-Version': version,
                'Buildtime' : new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
                'Main-Class': "${jarClass}",
                "Class-Path": configurations.compileOnly.collect { 'lib/' + it.getName() }.join(' ')
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.DSA', 'META-INF/*.SF'
}